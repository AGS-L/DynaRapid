/*
* DynaRapid
*
* This file is part of DynaRapid project
* Copyright: See COPYING file that comes with this distribution
* For any questions, please contact Andrea Guerrieri <andrea.guerrieri@ieee.org> (C) 2024
*/



//This class helps initiate the process of the generation of synthesis of the compoennts mentioned in the dot file
//This requires the dot file which is generated by the design generator.
import java.io.*;
import java.util.*;

public class GenerateSynthesis {
    
    public static void main(String args[]) throws IOException
    {
        if((StringUtils.findInArray("-f", args) == -1) || ((StringUtils.findInArray("-vhdl", args) == -1) && (StringUtils.findInArray("-generic", args) == -1)))
        {
            System.out.println("<usage>: java GenerateSynthesis [-f] [-lic] [-vhdl] [-generic] [-unwrap]");
            System.out.println("-f <arg> - Location of the .dot file generated by the design generator");
            System.out.println("-lic - If we need to add licence, add this argument");
            System.out.println("-unwrap - Generates just the pre-synthesized design without wrapping it. Can only be used with the generic field");
            System.out.println("-vhdl - This if added uses the V1 code to generate the synthesized dcp.");
            System.out.println("-generic - This if added uses the generic method for synthesis of the dcp. (Use cautiously since still under developement");
            System.out.println("Atleast one argument of vhdl or generic must be present in the args");
            return;
            
        }

        if(!Start.start())
            return;

        String dotLoc = args[StringUtils.findInArray("-f", args) + 1];
        boolean exportLicense = (StringUtils.findInArray("-lic", args) == -1) ? false : true;
        boolean useVHDL = (StringUtils.findInArray("-vhdl", args) == -1) ? false : true;
        boolean useGeneric = (StringUtils.findInArray("-generic", args) == -1) ? false : true;
        boolean unwrap = (StringUtils.findInArray("-unwrap", args) == -1) ? false : true;

        if(unwrap && useVHDL)
        {
            System.out.println("ERROR: Cannot have unwrap field with vhdl field. Unwrap field allowed only with the generic field");
            return;
        }

        File file = new File(dotLoc);
        if(!file.exists())
        {
            System.out.println("ERROR: Could not find the dot file mentioned in the location: " + dotLoc);
            return;
        }

        if(useGeneric)
        {
            //Generating synthesis using generic argumements
            System.out.println("Generating synthesized DCPs using generic arguments");
            if(!SynthesisGenerator.synthesizeComponentsUsingGeneric(dotLoc, unwrap, exportLicense))
                System.out.println("ERROR: Could not run the synthesis process. See above logs");

            return;
        }

        if(useVHDL)
        {
            //Generating synthesis using the vhdl files
            System.out.println("Generating synthesized DCPs using vhdl files");
            if(!SynthesisGenerator.synthesizeComponentsUsingVHDL(dotLoc, exportLicense))
                System.out.println("ERROR: Could not run the synthesis process. See above logs");

            return;
        }
    }
}
